{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/larissabrown/Desktop/Development/module-6/urban-harvest/client/src/context/HarvestProvider.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { userAxios } from \"./UserProvider\";\nimport axios from 'axios';\nexport const HarvestContext = /*#__PURE__*/React.createContext();\nexport const harvestAxios = axios.create();\nexport default _s(({\n  children\n}) => {\n  _s();\n\n  const [harvest, setHarvest] = useState({\n    body: 'This is about the harvest.',\n    harvestImg: 'imgUrl',\n    userHandle: 'FarmerName'\n  });\n  const [harvests, setHarvests] = useState([{\n    body: 'This is about the harvest.',\n    harvestImg: 'imgUrl',\n    userHandle: 'FarmerName'\n  }, {\n    body: 'This is about the harvest.',\n    harvestImg: 'imgUrl',\n    userHandle: 'FarmerName'\n  }]); // const getAllHarvests = () => {\n  //     userAxios.get(`/harvests`) \n  //     .then(response => {\n  //         setHarvests([...harvests, response.data]) \n  //      })\n  //      .catch(err => console.error(err))\n  //     }\n\n  const getHarvest = id => {\n    userAxios.get(`/api/harvest/${id}`).then(response => {\n      setHarvest(prevHarvests => prevHarvests.map(harvest => harvest._id === id ? { ...harvest\n      } : harvest));\n    }).catch(err => console.error(err));\n  };\n\n  const updateHarvest = (id, data) => {\n    userAxios.put(`/api/harvest/${id}`, data).then(response => {\n      const index = harvests.findIndex(harvest => harvest._id === id);\n      const updated = [...harvests];\n      updated[index].harvest = response.data;\n      setHarvests([updated]);\n    }).catch(err => console.dir(err));\n  };\n\n  const deleteHarvest = id => {\n    userAxios.delete(`/api/harvest/${id}`).then(response => {\n      setHarvest(prevHarvests => [prevHarvests.filter(harvest => harvest.user._id !== id), response.data]);\n    }).catch(err => console.dir(err));\n  };\n\n  const getUserHarvests = id => {\n    userAxios.get(`/api/harvest/${id}`).then(response => {\n      setHarvest(prevHarvests => [prevHarvests.filter(harvest => harvest.user === id)], response.data);\n    }).catch(err => console.log(err.response.data.errMsg));\n  };\n\n  const addHarvest = body => {\n    userAxios.post(`/api/harvest`, body).then(response => {\n      setHarvests(prevHarvests => [...prevHarvests], response.data);\n    }).catch(err => console.dir(err));\n  };\n\n  return;\n\n  /*#__PURE__*/\n  _jsxDEV(HarvestContext.Provider, {\n    value: {\n      harvests,\n      harvest,\n      //getAllHarvests,\n      getUserHarvests,\n      deleteHarvest,\n      updateHarvest,\n      addHarvest,\n      getHarvest\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 9\n  }, this);\n}, \"32Qng2PM+bLLyQXhMELL0nteRd4=\");","map":{"version":3,"sources":["/Users/larissabrown/Desktop/Development/module-6/urban-harvest/client/src/context/HarvestProvider.js"],"names":["React","useState","userAxios","axios","HarvestContext","createContext","harvestAxios","create","children","harvest","setHarvest","body","harvestImg","userHandle","harvests","setHarvests","getHarvest","id","get","then","response","prevHarvests","map","_id","catch","err","console","error","updateHarvest","data","put","index","findIndex","updated","dir","deleteHarvest","delete","filter","user","getUserHarvests","log","errMsg","addHarvest","post"],"mappings":"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","sourcesContent":["import React, {useState} from \"react\";\nimport { userAxios} from \"./UserProvider\";\nimport axios from 'axios'\n\n\n\nexport const HarvestContext = React.createContext();\nexport const harvestAxios = axios.create() \n\n\nexport default ({children}) => {\n   \n   \n    const [harvest, setHarvest] = useState({body: 'This is about the harvest.', harvestImg: 'imgUrl', userHandle:'FarmerName'})\n    const [harvests, setHarvests] = useState([{body: 'This is about the harvest.', harvestImg: 'imgUrl', userHandle:'FarmerName'},{body: 'This is about the harvest.', harvestImg: 'imgUrl', userHandle:'FarmerName'}])\n    \n\n    // const getAllHarvests = () => {\n    //     userAxios.get(`/harvests`) \n    //     .then(response => {\n    //         setHarvests([...harvests, response.data]) \n            \n            \n    //      })\n    //      .catch(err => console.error(err))\n         \n            \n    //     }\n    \n   \n    const getHarvest = (id)=> {\n        userAxios.get(`/api/harvest/${id}`)\n        .then(response => {\n            setHarvest(prevHarvests => prevHarvests.map(harvest=> harvest._id === id? {...harvest} : harvest)) \n        }).catch(err => console.error(err))\n    }\n\n\n\t\n\tconst updateHarvest = (id, data) => {\n\t\tuserAxios.put(`/api/harvest/${id}`, data).then(response => {\n\t\t\tconst index = harvests.findIndex(harvest => harvest._id === id)\n\t\t\tconst updated = [...harvests];\n\t\t\tupdated[index].harvest = response.data;\n\t\t\tsetHarvests([updated]);\n\t\t}).catch(err => console.dir(err));\n    };\n    \n   \n\n\tconst deleteHarvest = id => {\n\t\tuserAxios.delete(`/api/harvest/${id}`).then(response => {\n\t\t\tsetHarvest(prevHarvests => [prevHarvests.filter(harvest => harvest.user._id !== id), response.data]);\n\t\t}).catch(err => console.dir(err));\n    };\n    \n\tconst getUserHarvests = id =>{\n        userAxios.get(`/api/harvest/${id}`).then(response =>{ \n            setHarvest(prevHarvests => [prevHarvests.filter(harvest => harvest.user === id)],response.data ) \n            \n        })\n        .catch(err => console.log(err.response.data.errMsg))\n    }\n    \n    \n\n\n    const addHarvest  = (body) => {\n        \tuserAxios.post(`/api/harvest`, body).then(response => {\n                setHarvests(prevHarvests => [...prevHarvests] , response.data);\n                \n        \t}).catch(err => console.dir(err));\n        };\n    \n    \n      \n\treturn \n        <HarvestContext.Provider \n        value = {{\n           harvests,\n           harvest, \n           //getAllHarvests,\n           getUserHarvests,\n           deleteHarvest, \n           updateHarvest, \n           addHarvest,\n           getHarvest\n\n        }}>\n\t\t\t{children}\n\t\t</HarvestContext.Provider>\n\t\n}"]},"metadata":{},"sourceType":"module"}