{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/larissabrown/Desktop/Development/module-6/urban-harvest/client/src/components/Contact.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport emailjs from 'emailjs-com';\nexport default function Contact(props) {\n  _s();\n\n  const contactNumber = Math.random() * 100000 | 0;\n  const {\n    farmer,\n    onClick\n  } = props; //when you click on image a contact form will show up that is connected to js email and the farmer will be contacted. \n  //idea: have a verbal recording that can be done to attach to the contact email for the user to leave a voice message. \n\n  const [values, setValues] = useState({\n    name: '',\n    email: '',\n    message: ''\n  });\n\n  const handleChange = name => e => {\n    setValues({ ...values,\n      [e.target.name]: e.target.value\n    });\n  };\n\n  const isFormValid = () => {\n    if (!values.user_name || !values.email || !values.message) {\n      return false;\n    } else {\n      return true;\n    }\n  };\n\n  const sendEmail = e => {\n    emailjs.sendForm('user_oQB8bFJjV5Vpe', 'contact_form').then(function () {\n      console.log('SUCCESS!');\n    }, function (error) {\n      console.log('FAILED...', error);\n    });\n  };\n\n  const handleContact = e => {\n    e.preventDefault();\n    !isFormValid() ? console.log(\"falto algo\") : sendEmail(e);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        id: \"contact_form\",\n        onSubmit: handleContact,\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"hidden\",\n          name: \"contact_number\",\n          value: contactNumber\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Name\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 33\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          name: \"user_name\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 33\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Email\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 33\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"email\",\n          name: \"user_email\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 33\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Message\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 33\n        }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n          name: \"message\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 33\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"submit\",\n          value: \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          style: {\n            margin: 0\n          },\n          onClick: onClick,\n          children: \"X\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Contact: \", farmer]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n}\n\n_s(Contact, \"mdeZqVlzI+HUiYXlHOrvZefR5VM=\");\n\n_c = Contact;\n\nvar _c;\n\n$RefreshReg$(_c, \"Contact\");","map":{"version":3,"sources":["/Users/larissabrown/Desktop/Development/module-6/urban-harvest/client/src/components/Contact.js"],"names":["React","useState","emailjs","Contact","props","contactNumber","Math","random","farmer","onClick","values","setValues","name","email","message","handleChange","e","target","value","isFormValid","user_name","sendEmail","sendForm","then","console","log","error","handleContact","preventDefault","margin"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport emailjs from 'emailjs-com'\n\n\n\n\nexport default function Contact (props){\n    \nconst contactNumber = Math.random() * 100000 | 0;\nconst {farmer, onClick} = props\n//when you click on image a contact form will show up that is connected to js email and the farmer will be contacted. \n//idea: have a verbal recording that can be done to attach to the contact email for the user to leave a voice message. \nconst [values, setValues] = useState({\n    name: '',\n    email: '',\n    message: '',\n});\nconst handleChange = (name)=> (e) => {\n    setValues({ ...values, [e.target.name]: e.target.value });\n};\n\nconst isFormValid = () => {\n    if (!values.user_name || !values.email || !values.message) {\n\n  return false;}\n  else {\n  return true;}\n\n};\n\nconst sendEmail = (e)=> {\n    emailjs.sendForm('user_oQB8bFJjV5Vpe', 'contact_form')\n    .then(function() {\n      console.log('SUCCESS!');\n      \n    }, function(error) {\n      console.log('FAILED...', error);\n    });\n}\n\n\nconst  handleContact = (e) => {\n    e.preventDefault()\n    !isFormValid()? console.log(\"falto algo\") : sendEmail(e)\n    \n}\n\n    return (\n        \n            <>\n            <div>\n                    <form id=\"contact_form\" onSubmit={handleContact}>\n\t\t\t\t\t\t\t\t<input type=\"hidden\" name=\"contact_number\" value={contactNumber}/>\n\t\t\t\t\t\t\t\t<label>Name</label>\n                                <br/>\n\t\t\t\t\t\t\t\t<input type=\"text\" name=\"user_name\"/>\n                                <br/>\n\t\t\t\t\t\t\t\t<label>Email</label>\n                                <br/>\n\t\t\t\t\t\t\t\t<input type=\"email\" name=\"user_email\"/>\n                                <br/>\n\t\t\t\t\t\t\t\t<label>Message</label>\n                                <br/>\n\t\t\t\t\t\t\t\t<textarea name=\"message\"></textarea>\n                                <br/>\n\t\t\t\t\t\t\t\t<input type=\"submit\" value=\"Send\"/>\n                            <button style={{margin: 0}} onClick={onClick}>X</button> \n                        <p >Contact: {farmer}</p>\n\t\t\t\t\t</form>\n            </div>\n\t\t\t</>\n               \n        \n    )\n}\n\n\n\n\n\n\n\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}