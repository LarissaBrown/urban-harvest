{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/larissabrown/Desktop/Development/module-6/urban-harvest/client/src/context/HarvestProvider.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { userAxios } from \"./UserProvider\";\nexport const HarvestContext = /*#__PURE__*/React.createContext();\nexport default function HarvestProvider({\n  children\n}) {\n  _s();\n\n  const [harvest, setHarvest] = useState({\n    body: 'This is about the harvest.',\n    harvestImg: '../components/radishes.jpg',\n    userHandle: 'FarmerName'\n  });\n  const [harvests, setHarvests] = useState([{\n    body: 'This is about the harvest.',\n    harvestImg: '../components/radishes.jpg',\n    userHandle: 'FarmerName'\n  }, {\n    body: 'This is about the harvest.',\n    harvestImg: 'imgUrl',\n    userHandle: 'FarmerName'\n  }]);\n\n  const getAllHarvests = () => {\n    userAxios.get(`/harvests`).then(response => {\n      setHarvests([...harvests, response.data]);\n    }).catch(err => console.error(err));\n  };\n\n  const getHarvest = id => {\n    userAxios.get(`/api/harvest/${id}`).then(response => {\n      setHarvest(prevHarvests => prevHarvests.map(harvest => harvest._id === id ? { ...harvest\n      } : harvest));\n    }).catch(err => console.error(err));\n  };\n\n  const updateHarvest = (id, data) => {\n    userAxios.put(`/api/harvest/${id}`, data).then(response => {\n      const index = harvests.findIndex(harvest => harvest._id === id);\n      const updated = [...harvests];\n      updated[index].harvest = response.data;\n      setHarvests([updated]);\n    }).catch(err => console.dir(err));\n  };\n\n  const deleteHarvest = id => {\n    userAxios.delete(`/api/harvest/${id}`).then(response => {\n      setHarvest(prevHarvests => [prevHarvests.filter(harvest => harvest.user._id !== id), response.data]);\n    }).catch(err => console.dir(err));\n  };\n\n  const getUserHarvests = id => {\n    userAxios.get(`/api/harvest/${id}`).then(response => {\n      setHarvest(prevHarvests => [prevHarvests.filter(harvest => harvest.user === id)], response.data);\n    }).catch(err => console.log(err.response.data.errMsg));\n  };\n\n  const addHarvest = body => {\n    userAxios.post(`/api/harvest`, body).then(response => {\n      setHarvests(prevHarvests => [...prevHarvests], response.data);\n    }).catch(err => console.dir(err));\n  };\n\n  return /*#__PURE__*/_jsxDEV(HarvestContext.Provider, {\n    value: {\n      harvests,\n      harvest,\n      getAllHarvests,\n      getUserHarvests,\n      deleteHarvest,\n      updateHarvest,\n      addHarvest,\n      getHarvest\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 12\n  }, this);\n}\n\n_s(HarvestProvider, \"52zSj8FpIIeVx3hunKom31nFlWQ=\");\n\n_c = HarvestProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"HarvestProvider\");","map":{"version":3,"sources":["/Users/larissabrown/Desktop/Development/module-6/urban-harvest/client/src/context/HarvestProvider.js"],"names":["React","useState","userAxios","HarvestContext","createContext","HarvestProvider","children","harvest","setHarvest","body","harvestImg","userHandle","harvests","setHarvests","getAllHarvests","get","then","response","data","catch","err","console","error","getHarvest","id","prevHarvests","map","_id","updateHarvest","put","index","findIndex","updated","dir","deleteHarvest","delete","filter","user","getUserHarvests","log","errMsg","addHarvest","post"],"mappings":"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","sourcesContent":["import React, {useState} from \"react\";\nimport { userAxios} from \"./UserProvider\";\n\n\n\n\nexport const HarvestContext = React.createContext();\n\n\n\nexport default function HarvestProvider({ children }) {\n\n\n    const [harvest, setHarvest] = useState({ body: 'This is about the harvest.', harvestImg: '../components/radishes.jpg', userHandle: 'FarmerName' });\n    const [harvests, setHarvests] = useState([{ body: 'This is about the harvest.', harvestImg: '../components/radishes.jpg', userHandle: 'FarmerName' }, { body: 'This is about the harvest.', harvestImg: 'imgUrl', userHandle: 'FarmerName' }]);\n\n\n    const getAllHarvests = () => {\n        userAxios.get(`/harvests`)\n            .then(response => {\n                setHarvests([...harvests, response.data]);\n\n\n            })\n            .catch(err => console.error(err));\n\n\n    };\n\n\n    const getHarvest = (id) => {\n        userAxios.get(`/api/harvest/${id}`)\n            .then(response => {\n                setHarvest(prevHarvests => prevHarvests.map(harvest => harvest._id === id ? { ...harvest } : harvest));\n            }).catch(err => console.error(err));\n    };\n\n\n\n    const updateHarvest = (id, data) => {\n        userAxios.put(`/api/harvest/${id}`, data).then(response => {\n            const index = harvests.findIndex(harvest => harvest._id === id);\n            const updated = [...harvests];\n            updated[index].harvest = response.data;\n            setHarvests([updated]);\n        }).catch(err => console.dir(err));\n    };\n\n\n\n    const deleteHarvest = id => {\n        userAxios.delete(`/api/harvest/${id}`).then(response => {\n            setHarvest(prevHarvests => [prevHarvests.filter(harvest => harvest.user._id !== id), response.data]);\n        }).catch(err => console.dir(err));\n    };\n\n    const getUserHarvests = id => {\n        userAxios.get(`/api/harvest/${id}`).then(response => {\n            setHarvest(prevHarvests => [prevHarvests.filter(harvest => harvest.user === id)], response.data);\n\n        })\n            .catch(err => console.log(err.response.data.errMsg));\n    };\n\n\n\n\n    const addHarvest = (body) => {\n        userAxios.post(`/api/harvest`, body).then(response => {\n            setHarvests(prevHarvests => [...prevHarvests], response.data);\n\n        }).catch(err => console.dir(err));\n    };\n\n\n\n    return <HarvestContext.Provider\n        value={{\n            harvests,\n            harvest,\n            getAllHarvests,\n            getUserHarvests,\n            deleteHarvest,\n            updateHarvest,\n            addHarvest,\n            getHarvest\n        }}>\n        {children}\n    </HarvestContext.Provider>;\n\n}\n"]},"metadata":{},"sourceType":"module"}