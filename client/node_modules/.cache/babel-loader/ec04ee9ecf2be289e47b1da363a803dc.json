{"ast":null,"code":"import { parse } from 'content-type';\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nvar checkIsString = /*#__PURE__*/getRefinement(function (value) {\n  return typeof value === 'string' ? value : null;\n});\n\nvar isDefined = function isDefined(x) {\n  return x !== null && x !== undefined;\n};\n\nfunction getRefinement(getB) {\n  return function (a) {\n    return isDefined(getB(a));\n  };\n}\n\nvar checkIsNonEmptyArray = function checkIsNonEmptyArray(a) {\n  return a.length > 0;\n};\n/** Takes a dictionary containing nullish values and returns a dictionary of all the defined\r\n * (non-nullish) values.\r\n */\n\n\nvar compactDefined = function compactDefined(obj) {\n  return Object.keys(obj).reduce(function (acc, key) {\n    var _ref;\n\n    var value = obj[key];\n    return _extends({}, acc, isDefined(value) ? (_ref = {}, _ref[key] = value, _ref) : {});\n  }, {});\n};\n\nfunction flow() {\n  for (var _len = arguments.length, fns = new Array(_len), _key = 0; _key < _len; _key++) {\n    fns[_key] = arguments[_key];\n  }\n\n  var len = fns.length - 1;\n  return function () {\n    for (var _len2 = arguments.length, x = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      x[_key2] = arguments[_key2];\n    }\n\n    var y = fns[0].apply(this, x);\n\n    for (var i = 1; i <= len; i++) {\n      y = fns[i].call(this, y);\n    }\n\n    return y;\n  };\n}\n\nvar checkIsObject = /*#__PURE__*/getRefinement(function (response) {\n  return isDefined(response) && typeof response === 'object' && !Array.isArray(response) ? response : null;\n});\nvar checkIsErrors = /*#__PURE__*/getRefinement(function (errors) {\n  return Array.isArray(errors) && errors.every(checkIsString) && checkIsNonEmptyArray(errors) ? errors : null;\n});\nvar checkIsApiError = /*#__PURE__*/getRefinement(function (response) {\n  return checkIsObject(response) && 'errors' in response && checkIsErrors(response.errors) ? {\n    errors: response.errors\n  } : null;\n});\n\nvar getErrorForBadStatusCode = function getErrorForBadStatusCode(jsonResponse) {\n  if (checkIsApiError(jsonResponse)) {\n    return {\n      errors: jsonResponse.errors,\n      source: 'api'\n    };\n  } else {\n    return {\n      errors: ['Responded with a status code outside the 2xx range, and the response body is not recognisable.'],\n      source: 'decoding'\n    };\n  }\n};\n\nvar DecodingError = function DecodingError(message) {\n  this.message = message;\n};\n\nvar CONTENT_TYPE_RESPONSE_HEADER = 'content-type';\nvar CONTENT_TYPE_JSON = 'application/json';\n\nvar checkIsJsonResponse = function checkIsJsonResponse(response) {\n  var contentTypeHeader = response.headers.get(CONTENT_TYPE_RESPONSE_HEADER);\n  return isDefined(contentTypeHeader) && parse(contentTypeHeader).type === CONTENT_TYPE_JSON;\n};\n/**\r\n * Note: restrict the type of JSON to `AnyJson` so that `any` doesn't leak downstream.\r\n */\n\n\nvar getJsonResponse = function getJsonResponse(response) {\n  if (checkIsJsonResponse(response)) {\n    return response.json()[\"catch\"](function (_err) {\n      throw new DecodingError('unable to parse JSON response.');\n    });\n  } else {\n    throw new DecodingError('expected JSON response from server.');\n  }\n};\n\nvar handleFetchResponse = function handleFetchResponse(handleResponse) {\n  return function (response) {\n    return (response.ok ? handleResponse({\n      response: response\n    }).then(function (handledResponse) {\n      return {\n        type: 'success',\n        status: response.status,\n        response: handledResponse\n      };\n    }) : getJsonResponse(response).then(function (jsonResponse) {\n      return _extends({\n        type: 'error',\n        status: response.status\n      }, getErrorForBadStatusCode(jsonResponse));\n    }))[\"catch\"](function (error) {\n      /**\r\n       * We want to separate expected decoding errors from unknown ones. We do so by throwing a custom\r\n       * `DecodingError` whenever we encounter one within `handleFetchResponse` and catch them all\r\n       * here. This allows us to easily handle all of these errors at once. Unexpected errors are not\r\n       * caught, so that they bubble up and fail loudly.\r\n       *\r\n       * Note: Ideally we'd use an Either type, but this does the job without introducing dependencies\r\n       * like `fp-ts`.\r\n       */\n      if (error instanceof DecodingError) {\n        return {\n          type: 'error',\n          source: 'decoding',\n          status: response.status,\n          errors: [error.message]\n        };\n      } else {\n        throw error;\n      }\n    });\n  };\n};\n\nvar castResponse = function castResponse() {\n  return function (_ref) {\n    var response = _ref.response;\n    return getJsonResponse(response);\n  };\n};\n\nvar addQueryToUrl = function addQueryToUrl(query) {\n  return function (url) {\n    Object.keys(query).forEach(function (queryKey) {\n      return url.searchParams.set(queryKey, query[queryKey].toString());\n    });\n  };\n};\n\nvar addPathnameToUrl = function addPathnameToUrl(pathname) {\n  return function (url) {\n    // When there is no existing pathname, the value is `/`. Appending would give us a URL with two\n    // forward slashes. This is why we replace the value in that scenario.\n    if (url.pathname === '/') {\n      url.pathname = pathname;\n    } else {\n      url.pathname += pathname;\n    }\n  };\n};\n\nvar buildUrl = function buildUrl(_ref) {\n  var pathname = _ref.pathname,\n      query = _ref.query;\n  return function (apiUrl) {\n    var url = new URL(apiUrl);\n    addPathnameToUrl(pathname)(url);\n    addQueryToUrl(query)(url);\n    return url.toString();\n  };\n};\n\nvar parseQueryAndPathname = function parseQueryAndPathname(url) {\n  var _URL = new URL(url),\n      pathname = _URL.pathname,\n      searchParams = _URL.searchParams;\n\n  var query = {};\n  searchParams.forEach(function (value, key) {\n    query[key] = value;\n  });\n  return {\n    query: query,\n    pathname: pathname === '/' ? undefined : pathname\n  };\n};\n/**\r\n * helper used to type-check the arguments, and add default params for all requests\r\n */\n\n\nvar createRequestHandler = function createRequestHandler(fn) {\n  return function (a, additionalFetchOptions) {\n    if (additionalFetchOptions === void 0) {\n      additionalFetchOptions = {};\n    }\n\n    var _fn = fn(a),\n        headers = _fn.headers,\n        query = _fn.query,\n        baseReqParams = _objectWithoutPropertiesLoose(_fn, [\"headers\", \"query\"]);\n\n    return _extends({}, baseReqParams, additionalFetchOptions, {\n      query: query,\n      headers: _extends({}, headers, additionalFetchOptions.headers)\n    });\n  };\n};\n\nvar createRequestGenerator = function createRequestGenerator(handlers) {\n  return handlers;\n};\n\nvar initMakeRequest = function initMakeRequest(_ref) {\n  var accessKey = _ref.accessKey,\n      _ref$apiVersion = _ref.apiVersion,\n      apiVersion = _ref$apiVersion === void 0 ? 'v1' : _ref$apiVersion,\n      _ref$apiUrl = _ref.apiUrl,\n      apiUrl = _ref$apiUrl === void 0 ? 'https://api.unsplash.com' : _ref$apiUrl,\n      generalHeaders = _ref.headers,\n      providedFetch = _ref.fetch,\n      generalFetchOptions = _objectWithoutPropertiesLoose(_ref, [\"accessKey\", \"apiVersion\", \"apiUrl\", \"headers\", \"fetch\"]);\n\n  return function (_ref2) {\n    var handleResponse = _ref2.handleResponse,\n        handleRequest = _ref2.handleRequest;\n    return flow(handleRequest, function (_ref3) {\n      var pathname = _ref3.pathname,\n          query = _ref3.query,\n          _ref3$method = _ref3.method,\n          method = _ref3$method === void 0 ? 'GET' : _ref3$method,\n          endpointHeaders = _ref3.headers,\n          body = _ref3.body,\n          signal = _ref3.signal;\n      var url = buildUrl({\n        pathname: pathname,\n        query: query\n      })(apiUrl);\n\n      var fetchOptions = _extends({\n        method: method,\n        headers: _extends({}, generalHeaders, endpointHeaders, {\n          'Accept-Version': apiVersion\n        }, isDefined(accessKey) ? {\n          Authorization: \"Client-ID \" + accessKey\n        } : {}),\n        body: body,\n        signal: signal\n      }, generalFetchOptions);\n\n      var fetchToUse = providedFetch != null ? providedFetch : fetch;\n      return fetchToUse(url, fetchOptions).then(handleFetchResponse(handleResponse));\n    });\n  };\n};\n\nvar TOTAL_RESPONSE_HEADER = 'x-total';\n\nvar getTotalFromApiFeedResponse = function getTotalFromApiFeedResponse(response) {\n  var totalsStr = response.headers.get(TOTAL_RESPONSE_HEADER);\n\n  if (isDefined(totalsStr)) {\n    var total = parseInt(totalsStr);\n\n    if (Number.isInteger(total)) {\n      return total;\n    } else {\n      throw new DecodingError(\"expected \" + TOTAL_RESPONSE_HEADER + \" header to be valid integer.\");\n    }\n  } else {\n    throw new DecodingError(\"expected \" + TOTAL_RESPONSE_HEADER + \" header to exist.\");\n  }\n};\n\nvar handleFeedResponse = function handleFeedResponse() {\n  return function (_ref) {\n    var response = _ref.response;\n    return castResponse()({\n      response: response\n    }).then(function (results) {\n      return {\n        results: results,\n        total: getTotalFromApiFeedResponse(response)\n      };\n    });\n  };\n};\n\nvar getCollections = function getCollections(collectionIds) {\n  return isDefined(collectionIds) ? {\n    collections: collectionIds.join()\n  } : {};\n};\n\nvar getFeedParams = function getFeedParams(_ref) {\n  var page = _ref.page,\n      perPage = _ref.perPage,\n      orderBy = _ref.orderBy;\n  return compactDefined({\n    per_page: perPage,\n    order_by: orderBy,\n    page: page\n  });\n};\n\nvar COLLECTIONS_PATH_PREFIX = '/collections';\nvar getPhotos = {\n  handleRequest: /*#__PURE__*/createRequestHandler(function (_ref) {\n    var collectionId = _ref.collectionId,\n        orientation = _ref.orientation,\n        paginationParams = _objectWithoutPropertiesLoose(_ref, [\"collectionId\", \"orientation\"]);\n\n    return {\n      pathname: COLLECTIONS_PATH_PREFIX + \"/\" + collectionId + \"/photos\",\n      query: compactDefined(_extends({}, getFeedParams(paginationParams), {\n        orientation: orientation\n      }))\n    };\n  }),\n  handleResponse: /*#__PURE__*/handleFeedResponse()\n};\nvar get = {\n  handleRequest: /*#__PURE__*/createRequestHandler(function (_ref2) {\n    var collectionId = _ref2.collectionId;\n    return {\n      pathname: COLLECTIONS_PATH_PREFIX + \"/\" + collectionId,\n      query: {}\n    };\n  }),\n  handleResponse: /*#__PURE__*/castResponse()\n};\nvar list = {\n  handleRequest: /*#__PURE__*/createRequestHandler(function (paginationParams) {\n    if (paginationParams === void 0) {\n      paginationParams = {};\n    }\n\n    return {\n      pathname: COLLECTIONS_PATH_PREFIX,\n      query: getFeedParams(paginationParams)\n    };\n  }),\n  handleResponse: /*#__PURE__*/handleFeedResponse()\n};\nvar getRelated = {\n  handleRequest: /*#__PURE__*/createRequestHandler(function (_ref3) {\n    var collectionId = _ref3.collectionId;\n    return {\n      pathname: COLLECTIONS_PATH_PREFIX + \"/\" + collectionId + \"/related\",\n      query: {}\n    };\n  }),\n  handleResponse: /*#__PURE__*/castResponse()\n};\nvar index = {\n  __proto__: null,\n  getPhotos: getPhotos,\n  get: get,\n  list: list,\n  getRelated: getRelated\n};\nvar PHOTOS_PATH_PREFIX = '/photos';\nvar list$1 = {\n  handleRequest: /*#__PURE__*/createRequestHandler(function (feedParams) {\n    if (feedParams === void 0) {\n      feedParams = {};\n    }\n\n    return {\n      pathname: PHOTOS_PATH_PREFIX,\n      query: compactDefined(getFeedParams(feedParams))\n    };\n  }),\n  handleResponse: /*#__PURE__*/handleFeedResponse()\n};\nvar get$1 = {\n  handleRequest: /*#__PURE__*/createRequestHandler(function (_ref) {\n    var photoId = _ref.photoId;\n    return {\n      pathname: PHOTOS_PATH_PREFIX + \"/\" + photoId,\n      query: {}\n    };\n  }),\n  handleResponse: /*#__PURE__*/castResponse()\n};\nvar getStats = {\n  handleRequest: /*#__PURE__*/createRequestHandler(function (_ref2) {\n    var photoId = _ref2.photoId;\n    return {\n      pathname: PHOTOS_PATH_PREFIX + \"/\" + photoId + \"/statistics\",\n      query: {}\n    };\n  }),\n  handleResponse: /*#__PURE__*/castResponse()\n};\nvar getRandom = {\n  handleRequest: /*#__PURE__*/createRequestHandler(function (_temp) {\n    var _ref3 = _temp === void 0 ? {} : _temp,\n        collectionIds = _ref3.collectionIds,\n        contentFilter = _ref3.contentFilter,\n        queryParams = _objectWithoutPropertiesLoose(_ref3, [\"collectionIds\", \"contentFilter\"]);\n\n    return {\n      pathname: PHOTOS_PATH_PREFIX + \"/random\",\n      query: compactDefined(_extends({}, queryParams, {\n        content_filter: contentFilter\n      }, getCollections(collectionIds))),\n      headers: {\n        /**\r\n         * Avoid response caching\r\n         */\n        'cache-control': 'no-cache'\n      }\n    };\n  }),\n  handleResponse: /*#__PURE__*/castResponse()\n};\nvar trackDownload = {\n  handleRequest: /*#__PURE__*/createRequestHandler(function (_ref4) {\n    var downloadLocation = _ref4.downloadLocation;\n\n    var _parseQueryAndPathnam = parseQueryAndPathname(downloadLocation),\n        pathname = _parseQueryAndPathnam.pathname,\n        query = _parseQueryAndPathnam.query;\n\n    if (!isDefined(pathname)) {\n      throw new Error('Could not parse pathname from url.');\n    }\n\n    return {\n      pathname: pathname,\n      query: compactDefined(query)\n    };\n  }),\n  handleResponse: /*#__PURE__*/castResponse()\n};\nvar index$1 = {\n  __proto__: null,\n  list: list$1,\n  get: get$1,\n  getStats: getStats,\n  getRandom: getRandom,\n  trackDownload: trackDownload\n};\nvar SEARCH_PATH_PREFIX = \"/search\";\nvar getPhotos$1 = {\n  handleRequest: /*#__PURE__*/createRequestHandler(function (_ref) {\n    var query = _ref.query,\n        page = _ref.page,\n        perPage = _ref.perPage,\n        orderBy = _ref.orderBy,\n        collectionIds = _ref.collectionIds,\n        lang = _ref.lang,\n        contentFilter = _ref.contentFilter,\n        filters = _objectWithoutPropertiesLoose(_ref, [\"query\", \"page\", \"perPage\", \"orderBy\", \"collectionIds\", \"lang\", \"contentFilter\"]);\n\n    return {\n      pathname: SEARCH_PATH_PREFIX + \"/photos\",\n      query: compactDefined(_extends({\n        query: query,\n        content_filter: contentFilter,\n        lang: lang,\n        order_by: orderBy\n      }, getFeedParams({\n        page: page,\n        perPage: perPage\n      }), getCollections(collectionIds), filters))\n    };\n  }),\n  handleResponse: /*#__PURE__*/castResponse()\n};\nvar getCollections$1 = {\n  handleRequest: /*#__PURE__*/createRequestHandler(function (_ref2) {\n    var query = _ref2.query,\n        paginationParams = _objectWithoutPropertiesLoose(_ref2, [\"query\"]);\n\n    return {\n      pathname: SEARCH_PATH_PREFIX + \"/collections\",\n      query: _extends({\n        query: query\n      }, getFeedParams(paginationParams))\n    };\n  }),\n  handleResponse: /*#__PURE__*/castResponse()\n};\nvar getUsers = {\n  handleRequest: /*#__PURE__*/createRequestHandler(function (_ref3) {\n    var query = _ref3.query,\n        paginationParams = _objectWithoutPropertiesLoose(_ref3, [\"query\"]);\n\n    return {\n      pathname: SEARCH_PATH_PREFIX + \"/users\",\n      query: _extends({\n        query: query\n      }, getFeedParams(paginationParams))\n    };\n  }),\n  handleResponse: /*#__PURE__*/castResponse()\n};\nvar index$2 = {\n  __proto__: null,\n  getPhotos: getPhotos$1,\n  getCollections: getCollections$1,\n  getUsers: getUsers\n};\nvar USERS_PATH_PREFIX = '/users';\nvar get$2 = {\n  handleRequest: /*#__PURE__*/createRequestHandler(function (_ref) {\n    var username = _ref.username;\n    return {\n      pathname: USERS_PATH_PREFIX + \"/\" + username,\n      query: {}\n    };\n  }),\n  handleResponse: /*#__PURE__*/castResponse()\n};\nvar getPhotos$2 = {\n  handleRequest: /*#__PURE__*/createRequestHandler(function (_ref2) {\n    var username = _ref2.username,\n        stats = _ref2.stats,\n        orientation = _ref2.orientation,\n        paginationParams = _objectWithoutPropertiesLoose(_ref2, [\"username\", \"stats\", \"orientation\"]);\n\n    return {\n      pathname: USERS_PATH_PREFIX + \"/\" + username + \"/photos\",\n      query: compactDefined(_extends({}, getFeedParams(paginationParams), {\n        orientation: orientation,\n        stats: stats\n      }))\n    };\n  }),\n  handleResponse: /*#__PURE__*/handleFeedResponse()\n};\nvar getLikes = {\n  handleRequest: /*#__PURE__*/createRequestHandler(function (_ref3) {\n    var username = _ref3.username,\n        orientation = _ref3.orientation,\n        paginationParams = _objectWithoutPropertiesLoose(_ref3, [\"username\", \"orientation\"]);\n\n    return {\n      pathname: USERS_PATH_PREFIX + \"/\" + username + \"/likes\",\n      query: compactDefined(_extends({}, getFeedParams(paginationParams), {\n        orientation: orientation\n      }))\n    };\n  }),\n  handleResponse: /*#__PURE__*/handleFeedResponse()\n};\nvar getCollections$2 = {\n  handleRequest: /*#__PURE__*/createRequestHandler(function (_ref4) {\n    var username = _ref4.username,\n        paginationParams = _objectWithoutPropertiesLoose(_ref4, [\"username\"]);\n\n    return {\n      pathname: USERS_PATH_PREFIX + \"/\" + username + \"/collections\",\n      query: getFeedParams(paginationParams)\n    };\n  }),\n  handleResponse: /*#__PURE__*/handleFeedResponse()\n};\nvar index$3 = {\n  __proto__: null,\n  get: get$2,\n  getPhotos: getPhotos$2,\n  getLikes: getLikes,\n  getCollections: getCollections$2\n};\nvar BASE_TOPIC_PATH = '/topics';\n\nvar getTopicPath = function getTopicPath(_ref) {\n  var topicIdOrSlug = _ref.topicIdOrSlug;\n  return BASE_TOPIC_PATH + \"/\" + topicIdOrSlug;\n};\n\nvar getTopicPhotosPath = /*#__PURE__*/flow(getTopicPath, function (topicPath) {\n  return topicPath + \"/photos\";\n});\nvar list$2 = /*#__PURE__*/createRequestGenerator({\n  handleRequest: function handleRequest(_ref2) {\n    var page = _ref2.page,\n        perPage = _ref2.perPage,\n        orderBy = _ref2.orderBy,\n        topicIdsOrSlugs = _ref2.topicIdsOrSlugs;\n    return {\n      pathname: BASE_TOPIC_PATH,\n      query: compactDefined(_extends({}, getFeedParams({\n        page: page,\n        perPage: perPage\n      }), {\n        ids: topicIdsOrSlugs == null ? void 0 : topicIdsOrSlugs.join(','),\n        order_by: orderBy\n      }))\n    };\n  },\n  handleResponse: /*#__PURE__*/handleFeedResponse()\n});\nvar get$3 = /*#__PURE__*/createRequestGenerator({\n  handleRequest: function handleRequest(_ref3) {\n    var topicIdOrSlug = _ref3.topicIdOrSlug;\n    return {\n      pathname: getTopicPath({\n        topicIdOrSlug: topicIdOrSlug\n      }),\n      query: {}\n    };\n  },\n  handleResponse: /*#__PURE__*/castResponse()\n});\nvar getPhotos$3 = /*#__PURE__*/createRequestGenerator({\n  handleRequest: function handleRequest(_ref4) {\n    var topicIdOrSlug = _ref4.topicIdOrSlug,\n        orientation = _ref4.orientation,\n        feedParams = _objectWithoutPropertiesLoose(_ref4, [\"topicIdOrSlug\", \"orientation\"]);\n\n    return {\n      pathname: getTopicPhotosPath({\n        topicIdOrSlug: topicIdOrSlug\n      }),\n      query: compactDefined(_extends({}, getFeedParams(feedParams), {\n        orientation: orientation\n      }))\n    };\n  },\n  handleResponse: /*#__PURE__*/handleFeedResponse()\n});\n\nvar trackNonHotLinkedPhotoView = function trackNonHotLinkedPhotoView(_ref) {\n  var appId = _ref.appId;\n  return function (_ref2) {\n    var photoId = _ref2.photoId;\n    var ids = !Array.isArray(photoId) ? [photoId] : photoId;\n\n    if (ids.length > 20) {\n      throw new Error('You cannot track more than 20 photos at once. Please try again with fewer photos.');\n    }\n\n    return fetch(\"views.unsplash.com/v?photo_id=\" + ids.join() + \"&app_id=\" + appId);\n  };\n};\n\nvar internals = {\n  __proto__: null,\n  collections: index,\n  photos: index$1,\n  search: index$2,\n  users: index$3,\n  trackNonHotLinkedPhotoView: trackNonHotLinkedPhotoView\n};\nvar Language;\n\n(function (Language) {\n  Language[\"Afrikaans\"] = \"af\";\n  Language[\"Amharic\"] = \"am\";\n  Language[\"Arabic\"] = \"ar\";\n  Language[\"Azerbaijani\"] = \"az\";\n  Language[\"Belarusian\"] = \"be\";\n  Language[\"Bulgarian\"] = \"bg\";\n  Language[\"Bengali\"] = \"bn\";\n  Language[\"Bosnian\"] = \"bs\";\n  Language[\"Catalan\"] = \"ca\";\n  Language[\"Cebuano\"] = \"ceb\";\n  Language[\"Corsican\"] = \"co\";\n  Language[\"Czech\"] = \"cs\";\n  Language[\"Welsh\"] = \"cy\";\n  Language[\"Danish\"] = \"da\";\n  Language[\"German\"] = \"de\";\n  Language[\"Greek\"] = \"el\";\n  Language[\"English\"] = \"en\";\n  Language[\"Esperanto\"] = \"eo\";\n  Language[\"Spanish\"] = \"es\";\n  Language[\"Estonian\"] = \"et\";\n  Language[\"Basque\"] = \"eu\";\n  Language[\"Persian\"] = \"fa\";\n  Language[\"Finnish\"] = \"fi\";\n  Language[\"French\"] = \"fr\";\n  Language[\"Frisian\"] = \"fy\";\n  Language[\"Irish\"] = \"ga\";\n  Language[\"ScotsGaelic\"] = \"gd\";\n  Language[\"Galician\"] = \"gl\";\n  Language[\"Gujarati\"] = \"gu\";\n  Language[\"Hausa\"] = \"ha\";\n  Language[\"Hawaiian\"] = \"haw\";\n  Language[\"Hindi\"] = \"hi\";\n  Language[\"Hmong\"] = \"hmn\";\n  Language[\"Croatian\"] = \"hr\";\n  Language[\"HaitianCreole\"] = \"ht\";\n  Language[\"Hungarian\"] = \"hu\";\n  Language[\"Armenian\"] = \"hy\";\n  Language[\"Indonesian\"] = \"id\";\n  Language[\"Igbo\"] = \"ig\";\n  Language[\"Icelandic\"] = \"is\";\n  Language[\"Italian\"] = \"it\";\n  Language[\"Hebrew\"] = \"iw\";\n  Language[\"Japanese\"] = \"ja\";\n  Language[\"Javanese\"] = \"jw\";\n  Language[\"Georgian\"] = \"ka\";\n  Language[\"Kazakh\"] = \"kk\";\n  Language[\"Khmer\"] = \"km\";\n  Language[\"Kannada\"] = \"kn\";\n  Language[\"Korean\"] = \"ko\";\n  Language[\"Kurdish\"] = \"ku\";\n  Language[\"Kyrgyz\"] = \"ky\";\n  Language[\"Latin\"] = \"la\";\n  Language[\"Luxembourgish\"] = \"lb\";\n  Language[\"Lao\"] = \"lo\";\n  Language[\"Lithuanian\"] = \"lt\";\n  Language[\"Latvian\"] = \"lv\";\n  Language[\"Malagasy\"] = \"mg\";\n  Language[\"Maori\"] = \"mi\";\n  Language[\"Macedonian\"] = \"mk\";\n  Language[\"Malayalam\"] = \"ml\";\n  Language[\"Mongolian\"] = \"mn\";\n  Language[\"Marathi\"] = \"mr\";\n  Language[\"Malay\"] = \"ms\";\n  Language[\"Maltese\"] = \"mt\";\n  Language[\"Myanmar\"] = \"my\";\n  Language[\"Nepali\"] = \"ne\";\n  Language[\"Dutch\"] = \"nl\";\n  Language[\"Norwegian\"] = \"no\";\n  Language[\"Nyanja\"] = \"ny\";\n  Language[\"Oriya\"] = \"or\";\n  Language[\"Punjabi\"] = \"pa\";\n  Language[\"Polish\"] = \"pl\";\n  Language[\"Pashto\"] = \"ps\";\n  Language[\"Portuguese\"] = \"pt\";\n  Language[\"Romanian\"] = \"ro\";\n  Language[\"Russian\"] = \"ru\";\n  Language[\"Kinyarwanda\"] = \"rw\";\n  Language[\"Sindhi\"] = \"sd\";\n  Language[\"Sinhala\"] = \"si\";\n  Language[\"Slovak\"] = \"sk\";\n  Language[\"Slovenian\"] = \"sl\";\n  Language[\"Samoan\"] = \"sm\";\n  Language[\"Shona\"] = \"sn\";\n  Language[\"Somali\"] = \"so\";\n  Language[\"Albanian\"] = \"sq\";\n  Language[\"Serbian\"] = \"sr\";\n  Language[\"Sesotho\"] = \"st\";\n  Language[\"Sundanese\"] = \"su\";\n  Language[\"Swedish\"] = \"sv\";\n  Language[\"Swahili\"] = \"sw\";\n  Language[\"Tamil\"] = \"ta\";\n  Language[\"Telugu\"] = \"te\";\n  Language[\"Tajik\"] = \"tg\";\n  Language[\"Thai\"] = \"th\";\n  Language[\"Turkmen\"] = \"tk\";\n  Language[\"Filipino\"] = \"tl\";\n  Language[\"Turkish\"] = \"tr\";\n  Language[\"Tatar\"] = \"tt\";\n  Language[\"Uighur\"] = \"ug\";\n  Language[\"Ukrainian\"] = \"uk\";\n  Language[\"Urdu\"] = \"ur\";\n  Language[\"Uzbek\"] = \"uz\";\n  Language[\"Vietnamese\"] = \"vi\";\n  Language[\"Xhosa\"] = \"xh\";\n  Language[\"Yiddish\"] = \"yi\";\n  Language[\"Yoruba\"] = \"yo\";\n  Language[\"ChineseSimplified\"] = \"zh\";\n  Language[\"ChineseTraditional\"] = \"zh-TW\";\n  Language[\"Zulu\"] = \"zu\";\n})(Language || (Language = {}));\n\nvar OrderBy;\n\n(function (OrderBy) {\n  OrderBy[\"LATEST\"] = \"latest\";\n  OrderBy[\"POPULAR\"] = \"popular\";\n  OrderBy[\"VIEWS\"] = \"views\";\n  OrderBy[\"DOWNLOADS\"] = \"downloads\";\n  OrderBy[\"OLDEST\"] = \"oldest\";\n})(OrderBy || (OrderBy = {}));\n\nvar createApi = /*#__PURE__*/flow(initMakeRequest, function (makeRequest) {\n  return {\n    photos: {\n      get: makeRequest(get$1),\n      list: makeRequest(list$1),\n      getStats: makeRequest(getStats),\n      getRandom: makeRequest(getRandom),\n      trackDownload: makeRequest(trackDownload)\n    },\n    users: {\n      getPhotos: makeRequest(getPhotos$2),\n      getCollections: makeRequest(getCollections$2),\n      getLikes: makeRequest(getLikes),\n      get: makeRequest(get$2)\n    },\n    search: {\n      getCollections: makeRequest(getCollections$1),\n      getPhotos: makeRequest(getPhotos$1),\n      getUsers: makeRequest(getUsers)\n    },\n    collections: {\n      getPhotos: makeRequest(getPhotos),\n      get: makeRequest(get),\n      list: makeRequest(list),\n      getRelated: makeRequest(getRelated)\n    },\n    topics: {\n      list: makeRequest(list$2),\n      get: makeRequest(get$3),\n      getPhotos: makeRequest(getPhotos$3)\n    }\n  };\n});\nexport { Language, OrderBy, internals as _internals, createApi };","map":{"version":3,"sources":["../src/helpers/typescript.ts","../src/helpers/fp.ts","../src/helpers/errors.ts","../src/helpers/json.ts","../src/helpers/response.ts","../src/helpers/url.ts","../src/helpers/request.ts","../src/helpers/feed.ts","../src/helpers/query.ts","../src/methods/collections/index.ts","../src/methods/photos/index.ts","../src/methods/search/index.ts","../src/methods/users/index.ts","../src/methods/topics/index.ts","../src/beacon.ts","../src/methods/search/types/request.ts","../src/types/request.ts","../src/index.ts"],"names":["checkIsString","getRefinement","isDefined","x","getB","checkIsNonEmptyArray","a","compactDefined","value","obj","flow","fns","len","y","i","checkIsObject","Array","checkIsErrors","errors","checkIsApiError","response","getErrorForBadStatusCode","jsonResponse","source","DecodingError","CONTENT_TYPE_RESPONSE_HEADER","CONTENT_TYPE_JSON","checkIsJsonResponse","contentTypeHeader","ContentTypeHelpers","getJsonResponse","handleFetchResponse","type","status","handledResponse","error","castResponse","addQueryToUrl","Object","url","query","addPathnameToUrl","buildUrl","pathname","parseQueryAndPathname","searchParams","createRequestHandler","additionalFetchOptions","headers","baseReqParams","fn","createRequestGenerator","initMakeRequest","accessKey","apiVersion","apiUrl","generalHeaders","providedFetch","generalFetchOptions","handleResponse","handleRequest","method","endpointHeaders","body","signal","fetchOptions","Authorization","fetchToUse","TOTAL_RESPONSE_HEADER","getTotalFromApiFeedResponse","totalsStr","total","parseInt","Number","handleFeedResponse","results","getCollections","collections","collectionIds","getFeedParams","page","perPage","orderBy","per_page","order_by","COLLECTIONS_PATH_PREFIX","getPhotos","collectionId","orientation","paginationParams","Query","get","list","getRelated","PHOTOS_PATH_PREFIX","feedParams","photoId","getStats","getRandom","contentFilter","queryParams","content_filter","trackDownload","downloadLocation","SEARCH_PATH_PREFIX","lang","filters","getUsers","USERS_PATH_PREFIX","username","stats","getLikes","BASE_TOPIC_PATH","getTopicPath","topicIdOrSlug","getTopicPhotosPath","topicPath","topicIdsOrSlugs","ids","trackNonHotLinkedPhotoView","appId","fetch","Language","OrderBy","createApi","photos","makeRequest","users","search","topics"],"mappings":"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","sourcesContent":["// Copied from https://github.com/Microsoft/TypeScript/issues/1897#issuecomment-338650717\nexport type AnyJson = boolean | number | string | null | JsonArray | JsonMap;\nexport type JsonMap = { [key: string]: AnyJson };\nexport type JsonArray = Array<AnyJson>;\n\nexport const checkIsString = getRefinement(\n  (value: unknown): Nullable<string> => (typeof value === 'string' ? value : null),\n);\n\n/**\n * https://github.com/Microsoft/TypeScript/issues/12215#issuecomment-377567046\n */\nexport type OmitStrict<T, K extends keyof T> = Omit<T, K>;\n\n/**\n * Unlike TypeScript's `NonNullable`, this does _not_ include `undefined`\n */\nexport type Nullable<T> = T | null;\n\nexport const isDefined = <T>(x: T | null | undefined): x is T => x !== null && x !== undefined;\n\nexport type NonEmptyArray<T> = [T, ...T[]];\n\ntype Refinement<A, B extends A> = (a: A) => a is B;\nexport function getRefinement<A, B extends A>(getB: (a: A) => Nullable<B>): Refinement<A, B> {\n  return (a: A): a is B => isDefined(getB(a));\n}\n\nexport const checkIsNonEmptyArray = <T>(a: T[]): a is NonEmptyArray<T> => a.length > 0;\n","import { isDefined } from './typescript';\n\n/** Takes a dictionary containing nullish values and returns a dictionary of all the defined\n * (non-nullish) values.\n */\nexport const compactDefined = <A>(obj: Record<string, A | null | undefined>) =>\n  Object.keys(obj).reduce<Record<string, A>>((acc, key) => {\n    const value = obj[key];\n    return {\n      ...acc,\n      ...(isDefined(value) ? { [key]: value } : {}),\n    };\n  }, {});\n\n/**\n * copied from `fp-ts`\n * https://github.com/gcanti/fp-ts/blob/70190b5a03ddc2d31b4708c75c6dfad81d0bfa21/perf/function/flow.t¡s\n */\nexport function flow<A extends Array<unknown>, B>(ab: (...a: A) => B): (...a: A) => B;\nexport function flow<A extends Array<unknown>, B, C>(\n  ab: (...a: A) => B,\n  bc: (b: B) => C,\n): (...a: A) => C;\nexport function flow<A extends Array<unknown>, B, C, D>(\n  ab: (...a: A) => B,\n  bc: (b: B) => C,\n  cd: (b: C) => D,\n): (...a: A) => D;\nexport function flow(...fns: Array<Function>): Function {\n  const len = fns.length - 1;\n  return function(this: any, ...x: Array<any>) {\n    let y = fns[0].apply(this, x);\n    for (let i = 1; i <= len; i++) {\n      y = fns[i].call(this, y);\n    }\n    return y;\n  };\n}\n","import {\n  AnyJson,\n  checkIsString,\n  getRefinement,\n  isDefined,\n  checkIsNonEmptyArray,\n  JsonMap,\n  NonEmptyArray,\n  Nullable,\n} from './typescript';\n\nexport type Errors = NonEmptyArray<string>;\nexport type ErrorSource = 'api' | 'decoding';\n\nconst checkIsObject = getRefinement(\n  (response: AnyJson): Nullable<JsonMap> =>\n    isDefined(response) && typeof response === 'object' && !Array.isArray(response)\n      ? response\n      : null,\n);\n\nconst checkIsErrors = getRefinement(\n  (errors: AnyJson): Nullable<Errors> =>\n    Array.isArray(errors) && errors.every(checkIsString) && checkIsNonEmptyArray(errors)\n      ? errors\n      : null,\n);\n\nconst checkIsApiError = getRefinement(\n  (response: AnyJson): Nullable<{ errors: Errors }> =>\n    checkIsObject(response) && 'errors' in response && checkIsErrors(response.errors)\n      ? { errors: response.errors }\n      : null,\n);\n\nexport const getErrorForBadStatusCode = (\n  jsonResponse: AnyJson,\n): { errors: Errors; source: ErrorSource } => {\n  if (checkIsApiError(jsonResponse)) {\n    return { errors: jsonResponse.errors, source: 'api' };\n  } else {\n    return {\n      errors: [\n        'Responded with a status code outside the 2xx range, and the response body is not recognisable.',\n      ],\n      source: 'decoding',\n    };\n  }\n};\n\nexport class DecodingError {\n  constructor(readonly message: string) {}\n}\n","import * as ContentTypeHelpers from 'content-type';\nimport { DecodingError } from './errors';\nimport { AnyJson, isDefined } from './typescript';\n\nconst CONTENT_TYPE_RESPONSE_HEADER = 'content-type';\nconst CONTENT_TYPE_JSON = 'application/json';\nconst checkIsJsonResponse = (response: Response) => {\n  const contentTypeHeader = response.headers.get(CONTENT_TYPE_RESPONSE_HEADER);\n\n  return (\n    isDefined(contentTypeHeader) &&\n    ContentTypeHelpers.parse(contentTypeHeader).type === CONTENT_TYPE_JSON\n  );\n};\n\n/**\n * Note: restrict the type of JSON to `AnyJson` so that `any` doesn't leak downstream.\n */\nexport const getJsonResponse = (response: Response): Promise<AnyJson> => {\n  if (checkIsJsonResponse(response)) {\n    return response.json().catch(_err => {\n      throw new DecodingError('unable to parse JSON response.');\n    });\n  } else {\n    throw new DecodingError('expected JSON response from server.');\n  }\n};\n","import { Errors, ErrorSource, getErrorForBadStatusCode, DecodingError } from './errors';\nimport { getJsonResponse } from './json';\n\nexport type ApiResponse<T> =\n  | {\n      type: 'success';\n      response: T;\n      errors?: never;\n      status: number;\n    }\n  | {\n      type: 'error';\n      source: ErrorSource;\n      response?: never;\n      errors: Errors;\n      status: number;\n    };\n\nexport type HandleResponse<T> = (args: { response: Response }) => Promise<T>;\n\nexport const handleFetchResponse = <ResponseType>(handleResponse: HandleResponse<ResponseType>) => (\n  response: Response,\n): Promise<ApiResponse<ResponseType>> =>\n  (response.ok\n    ? handleResponse({ response }).then(\n        (handledResponse): ApiResponse<ResponseType> => ({\n          type: 'success',\n          status: response.status,\n          response: handledResponse,\n        }),\n      )\n    : getJsonResponse(response).then(\n        (jsonResponse): ApiResponse<ResponseType> => ({\n          type: 'error',\n          status: response.status,\n          ...getErrorForBadStatusCode(jsonResponse),\n        }),\n      )\n  ).catch(error => {\n    /**\n     * We want to separate expected decoding errors from unknown ones. We do so by throwing a custom\n     * `DecodingError` whenever we encounter one within `handleFetchResponse` and catch them all\n     * here. This allows us to easily handle all of these errors at once. Unexpected errors are not\n     * caught, so that they bubble up and fail loudly.\n     *\n     * Note: Ideally we'd use an Either type, but this does the job without introducing dependencies\n     * like `fp-ts`.\n     */\n    if (error instanceof DecodingError) {\n      return {\n        type: 'error',\n        source: 'decoding',\n        status: response.status,\n        errors: [error.message],\n      };\n    } else {\n      throw error;\n    }\n  });\n\nexport const castResponse = <T>(): HandleResponse<T> => ({ response }) =>\n  (getJsonResponse(response) as unknown) as Promise<T>;\n","type Query = {\n  [index: string]: string | number | boolean;\n};\n\nexport type BuildUrlParams = {\n  pathname: string;\n  query: Query;\n};\n\nconst addQueryToUrl = (query: Query) => (url: URL) => {\n  Object.keys(query).forEach(queryKey =>\n    url.searchParams.set(queryKey, query[queryKey].toString()),\n  );\n};\n\nconst addPathnameToUrl = (pathname: string) => (url: URL) => {\n  // When there is no existing pathname, the value is `/`. Appending would give us a URL with two\n  // forward slashes. This is why we replace the value in that scenario.\n  if (url.pathname === '/') {\n    url.pathname = pathname;\n  } else {\n    url.pathname += pathname;\n  }\n};\n\nexport const buildUrl = ({ pathname, query }: BuildUrlParams) => (apiUrl: string) => {\n  const url = new URL(apiUrl);\n  addPathnameToUrl(pathname)(url);\n  addQueryToUrl(query)(url);\n  return url.toString();\n};\n\nexport const parseQueryAndPathname = (url: string) => {\n  const { pathname, searchParams } = new URL(url);\n\n  const query: Query = {};\n\n  searchParams.forEach((value, key) => {\n    query[key] = value;\n  });\n\n  return { query, pathname: pathname === '/' ? undefined : pathname };\n};\n","import { flow } from './fp';\nimport { ApiResponse, handleFetchResponse, HandleResponse } from './response';\nimport { isDefined, OmitStrict } from './typescript';\nimport { buildUrl, BuildUrlParams } from './url';\n\ntype FetchParams = Pick<RequestInit, 'method'>;\n/**\n * The params generated by the library\n */\ntype BaseRequestParams = BuildUrlParams &\n  FetchParams &\n  // `headers` is not part of FetchParams because we want to allow headers in the additional params as well\n  Pick<RequestInit, 'headers'>;\n\n/**\n * Additional fetch options provided by the user on a per-call basis\n */\nexport interface AdditionalFetchOptions extends OmitStrict<RequestInit, keyof FetchParams> {}\nexport type CompleteRequestParams = BaseRequestParams & AdditionalFetchOptions;\ntype HandleRequest<Args> = (\n  a: Args,\n  additionalFetchOptions?: AdditionalFetchOptions,\n) => CompleteRequestParams;\n\n/**\n * helper used to type-check the arguments, and add default params for all requests\n */\nexport const createRequestHandler = <Args>(\n  fn: (a: Args) => BaseRequestParams,\n): HandleRequest<Args> => (a, additionalFetchOptions = {}) => {\n  const { headers, query, ...baseReqParams } = fn(a);\n\n  return {\n    ...baseReqParams,\n    ...additionalFetchOptions,\n    query,\n    headers: {\n      ...headers,\n      ...additionalFetchOptions.headers,\n    },\n  };\n};\n\nexport const createRequestGenerator = <Args, T>(handlers: RequestGenerator<Args, T>) => handlers;\n\n/**\n * Initial parameters that apply to all calls\n */\nexport type InitParams = {\n  apiVersion?: string;\n  fetch?: typeof fetch;\n} & OmitStrict<RequestInit, 'method' | 'body'> &\n  ({ accessKey: string; apiUrl?: never } | { apiUrl: string; accessKey?: never });\n\ntype RequestGenerator<Args, ResponseType> = {\n  handleRequest: HandleRequest<Args>;\n  handleResponse: HandleResponse<ResponseType>;\n};\n\ntype GeneratedRequestFunction<Args, ResponseType> = (\n  ...a: Parameters<HandleRequest<Args>>\n) => Promise<ApiResponse<ResponseType>>;\n\ntype InitMakeRequest = (\n  args: InitParams,\n) => <Args, ResponseType>(\n  handlers: RequestGenerator<Args, ResponseType>,\n) => GeneratedRequestFunction<Args, ResponseType>;\n\nexport const initMakeRequest: InitMakeRequest = ({\n  accessKey,\n  apiVersion = 'v1',\n  apiUrl = 'https://api.unsplash.com',\n  headers: generalHeaders,\n  fetch: providedFetch,\n  ...generalFetchOptions\n}) => ({ handleResponse, handleRequest }) =>\n  flow(\n    handleRequest,\n    ({ pathname, query, method = 'GET', headers: endpointHeaders, body, signal }) => {\n      const url = buildUrl({ pathname, query })(apiUrl);\n\n      const fetchOptions: RequestInit = {\n        method,\n        headers: {\n          ...generalHeaders,\n          ...endpointHeaders,\n          'Accept-Version': apiVersion,\n          ...(isDefined(accessKey) ? { Authorization: `Client-ID ${accessKey}` } : {}),\n        },\n        body,\n        signal,\n        ...generalFetchOptions,\n      };\n\n      const fetchToUse = providedFetch ?? fetch;\n\n      return fetchToUse(url, fetchOptions).then(handleFetchResponse(handleResponse));\n    },\n  );\n","import { DecodingError } from './errors';\nimport { HandleResponse, castResponse } from './response';\nimport { isDefined } from './typescript';\n\nconst TOTAL_RESPONSE_HEADER = 'x-total';\nconst getTotalFromApiFeedResponse = (response: Response) => {\n  const totalsStr = response.headers.get(TOTAL_RESPONSE_HEADER);\n  if (isDefined(totalsStr)) {\n    const total = parseInt(totalsStr);\n    if (Number.isInteger(total)) {\n      return total;\n    } else {\n      throw new DecodingError(`expected ${TOTAL_RESPONSE_HEADER} header to be valid integer.`);\n    }\n  } else {\n    throw new DecodingError(`expected ${TOTAL_RESPONSE_HEADER} header to exist.`);\n  }\n};\n\ntype FeedResponse<T> = {\n  results: T[];\n  total: number;\n};\n\nexport const handleFeedResponse = <T>(): HandleResponse<FeedResponse<T>> => ({ response }) =>\n  castResponse<T[]>()({ response }).then(results => ({\n    results,\n    total: getTotalFromApiFeedResponse(response),\n  }));\n","import { PaginationParams } from '../types/request';\nimport { compactDefined } from './fp';\nimport { isDefined } from './typescript';\n\nexport const getCollections = (collectionIds?: string[]) =>\n  isDefined(collectionIds) ? { collections: collectionIds.join() } : {};\n\nexport const getFeedParams = ({ page, perPage, orderBy }: PaginationParams) =>\n  compactDefined({\n    per_page: perPage,\n    order_by: orderBy,\n    page,\n  });\n","import { handleFeedResponse } from '../../helpers/feed';\nimport { compactDefined } from '../../helpers/fp';\nimport * as Query from '../../helpers/query';\nimport { createRequestHandler } from '../../helpers/request';\nimport { castResponse } from '../../helpers/response';\nimport { OrientationParam, PaginationParams } from '../../types/request';\n\ntype CollectionId = {\n  collectionId: string;\n};\n\nconst COLLECTIONS_PATH_PREFIX = '/collections';\n\nexport const getPhotos = {\n  handleRequest: createRequestHandler(\n    ({\n      collectionId,\n      orientation,\n      ...paginationParams\n    }: CollectionId & PaginationParams & OrientationParam) => ({\n      pathname: `${COLLECTIONS_PATH_PREFIX}/${collectionId}/photos`,\n      query: compactDefined({ ...Query.getFeedParams(paginationParams), orientation }),\n    }),\n  ),\n  handleResponse: handleFeedResponse<any>(),\n};\n\nexport const get = {\n  handleRequest: createRequestHandler(({ collectionId }: CollectionId) => ({\n    pathname: `${COLLECTIONS_PATH_PREFIX}/${collectionId}`,\n    query: {},\n  })),\n  handleResponse: castResponse<any>(),\n};\n\nexport const list = {\n  handleRequest: createRequestHandler(\n    (paginationParams: Pick<PaginationParams, 'page' | 'perPage'> = {}) => ({\n      pathname: COLLECTIONS_PATH_PREFIX,\n      query: Query.getFeedParams(paginationParams),\n    }),\n  ),\n  handleResponse: handleFeedResponse<any>(),\n};\n\nexport const getRelated = {\n  handleRequest: createRequestHandler(({ collectionId }: CollectionId) => ({\n    pathname: `${COLLECTIONS_PATH_PREFIX}/${collectionId}/related`,\n    query: {},\n  })),\n  handleResponse: castResponse<any>(),\n};\n","import { handleFeedResponse } from '../../helpers/feed';\nimport { compactDefined } from '../../helpers/fp';\nimport * as Query from '../../helpers/query';\nimport { createRequestHandler } from '../../helpers/request';\nimport { castResponse } from '../../helpers/response';\nimport { isDefined } from '../../helpers/typescript';\nimport { parseQueryAndPathname } from '../../helpers/url';\nimport { OrientationParam, PaginationParams } from '../../types/request';\nimport * as Photo from './types';\n\ntype PhotoId = {\n  photoId: string;\n};\n\nconst PHOTOS_PATH_PREFIX = '/photos';\n\nexport const list = {\n  handleRequest: createRequestHandler((feedParams: PaginationParams = {}) => ({\n    pathname: PHOTOS_PATH_PREFIX,\n    query: compactDefined(Query.getFeedParams(feedParams)),\n  })),\n  handleResponse: handleFeedResponse<Photo.Basic>(),\n};\n\nexport const get = {\n  handleRequest: createRequestHandler(({ photoId }: PhotoId) => ({\n    pathname: `${PHOTOS_PATH_PREFIX}/${photoId}`,\n    query: {},\n  })),\n  handleResponse: castResponse<Photo.Full>(),\n};\n\nexport const getStats = {\n  handleRequest: createRequestHandler(({ photoId }: PhotoId) => ({\n    pathname: `${PHOTOS_PATH_PREFIX}/${photoId}/statistics`,\n    query: {},\n  })),\n  handleResponse: castResponse<Photo.Stats>(),\n};\n\nexport const getRandom = {\n  handleRequest: createRequestHandler(\n    ({\n      collectionIds,\n      contentFilter,\n      ...queryParams\n    }: {\n      collectionIds?: string[];\n      featured?: boolean;\n      username?: string;\n      query?: string;\n      contentFilter?: 'low' | 'high';\n      count?: number;\n    } & OrientationParam = {}) => ({\n      pathname: `${PHOTOS_PATH_PREFIX}/random`,\n      query: compactDefined({\n        ...queryParams,\n        content_filter: contentFilter,\n        ...Query.getCollections(collectionIds),\n      }),\n      headers: {\n        /**\n         * Avoid response caching\n         */\n        'cache-control': 'no-cache',\n      },\n    }),\n  ),\n  handleResponse: castResponse<Photo.Random>(),\n};\n\nexport const trackDownload = {\n  handleRequest: createRequestHandler(({ downloadLocation }: { downloadLocation: string }) => {\n    const { pathname, query } = parseQueryAndPathname(downloadLocation);\n\n    if (!isDefined(pathname)) {\n      throw new Error('Could not parse pathname from url.');\n    }\n    return { pathname, query: compactDefined(query) };\n  }),\n  handleResponse: castResponse<{ url: string }>(),\n};\n","import { compactDefined } from '../../helpers/fp';\nimport * as Query from '../../helpers/query';\nimport { createRequestHandler } from '../../helpers/request';\nimport { castResponse } from '../../helpers/response';\nimport { OrientationParam, PaginationParams } from '../../types/request';\nimport { ColorId, ContentFilter, Language, SearchOrderBy } from './types/request';\nimport * as SearchResponse from './types/response';\n\nexport type SearchParams = {\n  query: string;\n} & Pick<PaginationParams, 'page' | 'perPage'>;\n\nconst SEARCH_PATH_PREFIX = `/search`;\n\ntype SearchPhotosParams = SearchParams &\n  OrientationParam & {\n    /**\n     * API defaults to `\"relevant\"` if no value is provided\n     */\n    orderBy?: SearchOrderBy;\n    color?: ColorId;\n    /**\n     * API defaults to `en` (English) if no value is provided\n     */\n    lang?: Language;\n    /**\n     * API defaults to `\"low\"` if no value is provided\n     */\n    contentFilter?: ContentFilter;\n    collectionIds?: string[];\n  };\n\nexport const getPhotos = {\n  handleRequest: createRequestHandler(\n    ({\n      query,\n      page,\n      perPage,\n      orderBy,\n      collectionIds,\n      lang,\n      contentFilter,\n      ...filters\n    }: SearchPhotosParams) => ({\n      pathname: `${SEARCH_PATH_PREFIX}/photos`,\n      query: compactDefined({\n        query,\n        content_filter: contentFilter,\n        lang,\n        order_by: orderBy,\n        ...Query.getFeedParams({ page, perPage }),\n        ...Query.getCollections(collectionIds),\n        ...filters,\n      }),\n    }),\n  ),\n  handleResponse: castResponse<SearchResponse.Photos>(),\n};\n\nexport const getCollections = {\n  handleRequest: createRequestHandler(({ query, ...paginationParams }: SearchParams) => ({\n    pathname: `${SEARCH_PATH_PREFIX}/collections`,\n    query: { query, ...Query.getFeedParams(paginationParams) },\n  })),\n  handleResponse: castResponse<SearchResponse.Collections>(),\n};\n\nexport const getUsers = {\n  handleRequest: createRequestHandler(({ query, ...paginationParams }: SearchParams) => ({\n    pathname: `${SEARCH_PATH_PREFIX}/users`,\n    query: { query, ...Query.getFeedParams(paginationParams) },\n  })),\n  handleResponse: castResponse<SearchResponse.Users>(),\n};\n","import { handleFeedResponse } from '../../helpers/feed';\nimport { compactDefined } from '../../helpers/fp';\nimport * as Query from '../../helpers/query';\nimport { createRequestHandler } from '../../helpers/request';\nimport { castResponse } from '../../helpers/response';\nimport { OrientationParam, PaginationParams } from '../../types/request';\nimport * as User from './types';\nimport * as Photo from '../photos/types';\nimport * as Collection from '../collections/types';\n\ntype UserName = {\n  username: string;\n};\n\nconst USERS_PATH_PREFIX = '/users';\n\nexport const get = {\n  handleRequest: createRequestHandler(({ username }: UserName) => ({\n    pathname: `${USERS_PATH_PREFIX}/${username}`,\n    query: {},\n  })),\n  handleResponse: castResponse<User.Full>(),\n};\n\nexport const getPhotos = {\n  handleRequest: createRequestHandler(\n    ({\n      username,\n      stats,\n      orientation,\n      ...paginationParams\n    }: {\n      stats?: boolean;\n    } & OrientationParam &\n      UserName &\n      PaginationParams) => ({\n      pathname: `${USERS_PATH_PREFIX}/${username}/photos`,\n      query: compactDefined({\n        ...Query.getFeedParams(paginationParams),\n        orientation,\n        stats,\n      }),\n    }),\n  ),\n  handleResponse: handleFeedResponse<Photo.Basic>(),\n};\n\nexport const getLikes = {\n  handleRequest: createRequestHandler(\n    ({\n      username,\n      orientation,\n      ...paginationParams\n    }: OrientationParam & UserName & PaginationParams) => ({\n      pathname: `${USERS_PATH_PREFIX}/${username}/likes`,\n      query: compactDefined({\n        ...Query.getFeedParams(paginationParams),\n        orientation,\n      }),\n    }),\n  ),\n  handleResponse: handleFeedResponse<Photo.Basic>(),\n};\nexport const getCollections = {\n  handleRequest: createRequestHandler(\n    ({ username, ...paginationParams }: UserName & PaginationParams) => ({\n      pathname: `${USERS_PATH_PREFIX}/${username}/collections`,\n      query: Query.getFeedParams(paginationParams),\n    }),\n  ),\n  handleResponse: handleFeedResponse<Collection.Basic>(),\n};\n","import { handleFeedResponse } from '../../helpers/feed';\nimport { compactDefined, flow } from '../../helpers/fp';\nimport * as Query from '../../helpers/query';\nimport { createRequestGenerator } from '../../helpers/request';\nimport { castResponse } from '../../helpers/response';\nimport { OmitStrict } from '../../helpers/typescript';\nimport { OrientationParam, PaginationParams } from '../../types/request';\nimport * as Photo from '../photos/types';\nimport * as Topic from './types';\n\ntype TopicIdOrSlug = {\n  topicIdOrSlug: string;\n};\n\nconst BASE_TOPIC_PATH = '/topics';\nconst getTopicPath = ({ topicIdOrSlug }: TopicIdOrSlug) => `${BASE_TOPIC_PATH}/${topicIdOrSlug}`;\nconst getTopicPhotosPath = flow(getTopicPath, topicPath => `${topicPath}/photos`);\n\ntype TopicOrderBy = 'latest' | 'oldest' | 'position' | 'featured';\n\nexport const list = createRequestGenerator({\n  handleRequest: ({\n    page,\n    perPage,\n    orderBy,\n    topicIdsOrSlugs,\n  }: OmitStrict<PaginationParams, 'orderBy'> & {\n    /**\n     * default: `position`\n     */\n    orderBy?: TopicOrderBy;\n    topicIdsOrSlugs?: string[];\n  }) => ({\n    pathname: BASE_TOPIC_PATH,\n    query: compactDefined({\n      ...Query.getFeedParams({ page, perPage }),\n      ids: topicIdsOrSlugs?.join(','),\n      order_by: orderBy,\n    }),\n  }),\n  handleResponse: handleFeedResponse<Topic.Basic>(),\n});\n\nexport const get = createRequestGenerator({\n  handleRequest: ({ topicIdOrSlug }: TopicIdOrSlug) => ({\n    pathname: getTopicPath({ topicIdOrSlug }),\n    query: {},\n  }),\n  handleResponse: castResponse<Topic.Full>(),\n});\n\nexport const getPhotos = createRequestGenerator({\n  handleRequest: ({\n    topicIdOrSlug,\n    orientation,\n    ...feedParams\n  }: TopicIdOrSlug & PaginationParams & OrientationParam) => ({\n    pathname: getTopicPhotosPath({ topicIdOrSlug }),\n    query: compactDefined({\n      ...Query.getFeedParams(feedParams),\n      orientation,\n    }),\n  }),\n  handleResponse: handleFeedResponse<Photo.Basic>(),\n});\n","export const trackNonHotLinkedPhotoView = ({ appId }: { appId: string }) => ({\n  photoId,\n}: {\n  photoId: string | string[];\n}) => {\n  const ids = !Array.isArray(photoId) ? [photoId] : photoId;\n\n  if (ids.length > 20) {\n    throw new Error(\n      'You cannot track more than 20 photos at once. Please try again with fewer photos.',\n    );\n  }\n\n  return fetch(`views.unsplash.com/v?photo_id=${ids.join()}&app_id=${appId}`);\n};\n","export type SearchOrderBy = 'relevant' | 'latest';\n\nexport type ColorId =\n  | 'white'\n  | 'black'\n  | 'yellow'\n  | 'orange'\n  | 'red'\n  | 'purple'\n  | 'magenta'\n  | 'green'\n  | 'teal'\n  | 'blue'\n  | 'black_and_white';\n\nexport type ContentFilter = 'high' | 'low';\n\nexport enum Language {\n  Afrikaans = 'af',\n  Amharic = 'am',\n  Arabic = 'ar',\n  Azerbaijani = 'az',\n  Belarusian = 'be',\n  Bulgarian = 'bg',\n  Bengali = 'bn',\n  Bosnian = 'bs',\n  Catalan = 'ca',\n  Cebuano = 'ceb',\n  Corsican = 'co',\n  Czech = 'cs',\n  Welsh = 'cy',\n  Danish = 'da',\n  German = 'de',\n  Greek = 'el',\n  English = 'en',\n  Esperanto = 'eo',\n  Spanish = 'es',\n  Estonian = 'et',\n  Basque = 'eu',\n  Persian = 'fa',\n  Finnish = 'fi',\n  French = 'fr',\n  Frisian = 'fy',\n  Irish = 'ga',\n  ScotsGaelic = 'gd',\n  Galician = 'gl',\n  Gujarati = 'gu',\n  Hausa = 'ha',\n  Hawaiian = 'haw',\n  Hindi = 'hi',\n  Hmong = 'hmn',\n  Croatian = 'hr',\n  HaitianCreole = 'ht',\n  Hungarian = 'hu',\n  Armenian = 'hy',\n  Indonesian = 'id',\n  Igbo = 'ig',\n  Icelandic = 'is',\n  Italian = 'it',\n  Hebrew = 'iw',\n  Japanese = 'ja',\n  Javanese = 'jw',\n  Georgian = 'ka',\n  Kazakh = 'kk',\n  Khmer = 'km',\n  Kannada = 'kn',\n  Korean = 'ko',\n  Kurdish = 'ku',\n  Kyrgyz = 'ky',\n  Latin = 'la',\n  Luxembourgish = 'lb',\n  Lao = 'lo',\n  Lithuanian = 'lt',\n  Latvian = 'lv',\n  Malagasy = 'mg',\n  Maori = 'mi',\n  Macedonian = 'mk',\n  Malayalam = 'ml',\n  Mongolian = 'mn',\n  Marathi = 'mr',\n  Malay = 'ms',\n  Maltese = 'mt',\n  Myanmar = 'my',\n  Nepali = 'ne',\n  Dutch = 'nl',\n  Norwegian = 'no',\n  Nyanja = 'ny',\n  Oriya = 'or',\n  Punjabi = 'pa',\n  Polish = 'pl',\n  Pashto = 'ps',\n  Portuguese = 'pt',\n  Romanian = 'ro',\n  Russian = 'ru',\n  Kinyarwanda = 'rw',\n  Sindhi = 'sd',\n  Sinhala = 'si',\n  Slovak = 'sk',\n  Slovenian = 'sl',\n  Samoan = 'sm',\n  Shona = 'sn',\n  Somali = 'so',\n  Albanian = 'sq',\n  Serbian = 'sr',\n  Sesotho = 'st',\n  Sundanese = 'su',\n  Swedish = 'sv',\n  Swahili = 'sw',\n  Tamil = 'ta',\n  Telugu = 'te',\n  Tajik = 'tg',\n  Thai = 'th',\n  Turkmen = 'tk',\n  Filipino = 'tl',\n  Turkish = 'tr',\n  Tatar = 'tt',\n  Uighur = 'ug',\n  Ukrainian = 'uk',\n  Urdu = 'ur',\n  Uzbek = 'uz',\n  Vietnamese = 'vi',\n  Xhosa = 'xh',\n  Yiddish = 'yi',\n  Yoruba = 'yo',\n  ChineseSimplified = 'zh',\n  ChineseTraditional = 'zh-TW',\n  Zulu = 'zu',\n}\n","export enum OrderBy {\n  LATEST = 'latest',\n  POPULAR = 'popular',\n  VIEWS = 'views',\n  DOWNLOADS = 'downloads',\n  OLDEST = 'oldest',\n}\nexport type Orientation = 'landscape' | 'portrait' | 'squarish';\nexport type OrientationParam = {\n  orientation?: Orientation;\n};\n\nexport type PaginationParams = {\n  /**\n   * API defaults to `10` if no value is provided\n   */\n  perPage?: number;\n  /**\n   * API defaults to `1` if no value is provided\n   */\n  page?: number;\n  /**\n   * API defaults to `\"latest\"` if no value is provided\n   */\n  orderBy?: OrderBy;\n};\n","import { flow } from './helpers/fp';\nimport { initMakeRequest } from './helpers/request';\nimport * as collections from './methods/collections';\nimport * as photos from './methods/photos';\nimport * as search from './methods/search';\nimport * as users from './methods/users';\nimport * as topics from './methods/topics';\n\nimport * as _internals from './internals';\n\nexport const createApi = flow(initMakeRequest, makeRequest => ({\n  photos: {\n    get: makeRequest(photos.get),\n    list: makeRequest(photos.list),\n    getStats: makeRequest(photos.getStats),\n    getRandom: makeRequest(photos.getRandom),\n    trackDownload: makeRequest(photos.trackDownload),\n  },\n  users: {\n    getPhotos: makeRequest(users.getPhotos),\n    getCollections: makeRequest(users.getCollections),\n    getLikes: makeRequest(users.getLikes),\n    get: makeRequest(users.get),\n  },\n  search: {\n    getCollections: makeRequest(search.getCollections),\n    getPhotos: makeRequest(search.getPhotos),\n    getUsers: makeRequest(search.getUsers),\n  },\n  collections: {\n    getPhotos: makeRequest(collections.getPhotos),\n    get: makeRequest(collections.get),\n    list: makeRequest(collections.list),\n    getRelated: makeRequest(collections.getRelated),\n  },\n  topics: {\n    list: makeRequest(topics.list),\n    get: makeRequest(topics.get),\n    getPhotos: makeRequest(topics.getPhotos),\n  },\n}));\n\nexport { Language, ColorId, ContentFilter, SearchOrderBy } from './methods/search/types/request';\nexport { OrderBy, Orientation } from './types/request';\nexport { _internals };\n"]},"metadata":{},"sourceType":"module"}